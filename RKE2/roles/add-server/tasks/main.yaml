---
# Copy server config with token to all servers except server 1 (this has token)
- name: Deploy RKE2 server Configuration
  ansible.builtin.template:
    src: templates/rke2-server-config.j2
    dest: /etc/rancher/rke2/config.yaml
    owner: root
    group: root
    mode: "0644"
  when: inventory_hostname != groups['servers'][0]

# Keep checking the cluster API until it's functioning (deployed)
- name: Wait for cluster API to be ready (can take 5-10 mins depending on internet/hardware)
  ansible.builtin.command:
    cmd: "kubectl get nodes"
  register: kubectl_output
  until: "'connection refused' not in kubectl_output.stderr"
  retries: 120
  delay: 10
  changed_when: true
  become_user: "{{ ansible_user }}"
  when: inventory_hostname == groups['servers'][0]

# Use kubectl to deploy yaml. Perhaps this can be added to the manifest folder initially
- name: Apply kube vip RBAC configuration
  ansible.builtin.command:
    cmd: kubectl --kubeconfig /etc/rancher/rke2/rke2.yaml apply -f https://kube-vip.io/manifests/rbac.yaml
  changed_when: true
  when: inventory_hostname == groups['servers'][0]

# Apply the kube-vip configration. Perhaps this can be added to the manifest folder initially
- name: Apply kube vip cloud controller
  ansible.builtin.command:
    cmd: kubectl --kubeconfig /etc/rancher/rke2/rke2.yaml apply -f https://raw.githubusercontent.com/kube-vip/kube-vip-cloud-provider/main/manifest/kube-vip-cloud-controller.yaml
  changed_when: true
  when: inventory_hostname == groups['servers'][0]

# Create configmap for IP range
- name: Create kube-vip IP range configmap
  ansible.builtin.command:
    cmd: kubectl create configmap -n kube-system kubevip --from-literal range-global={{ ip_range }}
  changed_when: true
  become_user: "{{ ansible_user }}"
  when: inventory_hostname == groups['servers'][0]
  ignore_errors: true # In case configmap already exists

# Restart servers to apply changes
- name: Ensure RKE2 servers are restarted
  ansible.builtin.systemd:
    name: rke2-server
    enabled: true
    state: restarted
    daemon_reload: true
  when: inventory_hostname in groups['servers']
